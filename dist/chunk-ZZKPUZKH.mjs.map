{"version":3,"sources":["../src/core/lib/encryption.ts","../src/core/backend-url.ts","../src/core/send-transaction-with-paymaster.ts","../src/core/create-argent-wallet.ts","../src/core/chipi-sdk.ts","../src/react/context/chipi-provider.tsx","../src/react/hooks/use-create-wallet.ts","../src/react/hooks/use-transfer.ts","../src/react/hooks/use-approve.ts","../src/react/hooks/use-stake-vesu-usdc.ts","../src/react/hooks/use-withdraw.ts","../src/react/hooks/use-call-any-contract.ts"],"names":["RpcProvider","Account","useMutation"],"mappings":"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","file":"chunk-ZZKPUZKH.mjs","sourcesContent":["import CryptoJS from \"crypto-js\";\n\nexport const encryptPrivateKey = (\n  privateKey: string,\n  password: string,\n): string => {\n  if (!privateKey || !password) {\n    throw new Error(\"Private key and password are required\");\n  }\n\n  return CryptoJS.AES.encrypt(privateKey, password).toString();\n};\n\nexport const decryptPrivateKey = (\n  encryptedPrivateKey: string,\n  password: string,\n): string | null => {\n  if (!encryptedPrivateKey || !password) {\n    console.error(\"Encrypted private key and password are required\");\n    return null;\n  }\n\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, password);\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n\n    // Check if the decrypted string is empty\n    if (!decrypted) {\n      return null;\n    }\n\n    return decrypted;\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return null;\n  }\n};\n","\n\n\nexport const BACKEND_URL = \"https://chipi-back-production.up.railway.app\";\n// export const BACKEND_URL = \"http://localhost:3000\";","import { Account, Call, RpcProvider } from \"starknet\";\nimport { decryptPrivateKey } from \"./lib/encryption\";\nimport { BACKEND_URL } from \"./backend-url\";\n\nexport interface ExecuteTransactionParams {\n  apiPublicKey: string;\n  encryptKey: string;\n  bearerToken: string;\n  wallet: {\n    publicKey: string;\n    encryptedPrivateKey: string;\n  }; //ClerkWallet;\n  calls: Call[];\n}\n\nexport const executePaymasterTransaction = async (\n  params: ExecuteTransactionParams\n): Promise<string> => {\n  try {\n    const { encryptKey, wallet, calls, apiPublicKey, bearerToken } = params;\n    console.log(\"Params: \", params);\n    // Fetch the encrypted private key from clerk public metadata\n    const privateKeyDecrypted = decryptPrivateKey(\n      wallet.encryptedPrivateKey,\n      encryptKey\n    );\n\n    if (!privateKeyDecrypted) {\n      throw new Error(\"Failed to decrypt private key\");\n    }\n\n    const provider = new RpcProvider({\n      nodeUrl: \"https://cloud.argent-api.com/v1/starknet/mainnet/rpc/v0.7\",\n    });\n\n    const account = new Account(\n      provider,\n      wallet.publicKey,\n      privateKeyDecrypted\n    );\n\n    // Build the type data\n    // TODO: Call to the API to get the type data\n    const typeDataResponse = await fetch(`${BACKEND_URL}/transactions/prepare-typed-data`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${bearerToken}`,\n        'X-API-Key': apiPublicKey,\n      },\n      body: JSON.stringify({\n        publicKey: wallet.publicKey,\n        calls: calls,\n        accountClassHash: \"0x036078334509b514626504edc9fb252328d1a240e4e948bef8d0c08dff45927f\"\n      }),\n    });\n\n    if (!typeDataResponse.ok) {\n      const errorText = await typeDataResponse.text();\n      throw new Error(`Error en la API: ${errorText}`);\n    }\n\n    const typeData = await typeDataResponse.json();\n    // console.log('Type data recibido:', typeData.Calls);\n\n    // Sign the message\n    const userSignature = await account.signMessage(typeData);\n    //console.log(\"User signature: \", userSignature);\n\n\n   \n    // Execute the transaction\n    const executeTransaction = await fetch(`${BACKEND_URL}/transactions/execute-sponsored-transaction`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${bearerToken}`,\n        'X-API-Key': apiPublicKey,\n      },\n      body: JSON.stringify({\n        publicKey: wallet.publicKey,\n        typeData: typeData,\n        userSignature: {\n          r: (userSignature as any).r.toString(),\n          s: (userSignature as any).s.toString(),\n          recovery: (userSignature as any).recovery\n        }\n      }),\n    });\n\n    if (!executeTransaction.ok) {\n      const errorText = await executeTransaction.text();\n      throw new Error(`Error en la API de ejecución: ${errorText}`);\n    }\n\n    const result = await executeTransaction.json();\n    // console.log('Resultado de la transacción:', result);\n    \n    if (!result.transactionHash) {\n      throw new Error('La respuesta no contiene el hash de la transacción');\n    }\n\n    return result.transactionHash;\n  } catch (error) {\n    console.error(\"Error sending transaction with paymaster\", error);\n    throw error;\n  }\n};\n","import type { DeploymentData } from \"@avnu/gasless-sdk\";\nimport {\n  Account,\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CallData,\n  ec,\n  hash,\n  num,\n  RpcProvider,\n  stark,\n} from \"starknet\";\nimport { encryptPrivateKey } from \"./lib/encryption\";\nimport { CreateWalletParams, CreateWalletResponse, WalletData } from \"./types\";\nimport { BACKEND_URL } from \"./backend-url\";\n\n\nexport const createArgentWallet = async (\n   params: CreateWalletParams\n): Promise<CreateWalletResponse> => {\n\n  // console.log(\"create wallet Params: \", params);\n  try {\n    const { encryptKey, apiPublicKey, bearerToken, nodeUrl } = params;\n   \n    const provider = new RpcProvider({ nodeUrl: nodeUrl });\n    // Generating the private key with Stark Curve\n    const privateKeyAX = stark.randomAddress();\n    const starkKeyPubAX = ec.starkCurve.getStarkKey(privateKeyAX);\n\n    // Using Argent X Account v0.4.0 class hash\n    const accountClassHash = \"0x036078334509b514626504edc9fb252328d1a240e4e948bef8d0c08dff45927f\" //params.argentClassHash;\n  \n    // Calculate future address of the ArgentX account\n    const axSigner = new CairoCustomEnum({\n      Starknet: { pubkey: starkKeyPubAX },\n    });\n    // Set the dApp Guardian address\n    const axGuardian = new CairoOption<unknown>(CairoOptionVariant.None);\n\n    const AXConstructorCallData = CallData.compile({\n      owner: axSigner,\n      guardian: axGuardian,\n    });\n\n    const publicKey = hash.calculateContractAddressFromHash(\n      starkKeyPubAX,\n      accountClassHash,\n      AXConstructorCallData,\n      0\n    );\n    // console.log(\"Contract address: \", contractAddress);\n   \n    // Initiating Account\n    const account = new Account(provider, publicKey, privateKeyAX);\n    // console.log(\"Account \", { ...account });\n\n    // Backend Call API to create the wallet\n    console.log(\"apiPublicKey\", apiPublicKey);\n    const typeDataResponse = await fetch(`${BACKEND_URL}/chipi-wallets/prepare-creation`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${bearerToken}`,\n        'x-api-key': apiPublicKey,\n      },\n      body: JSON.stringify({\n        publicKey,\n      }),\n    });\n    const { typeData, accountClassHash: accountClassHashResponse } = await typeDataResponse.json();\n\n    // console.log(\"Type data: \", typeData);\n    // Sign the message\n    const userSignature = await account.signMessage(typeData);\n\n    // console.log(\"User signature: \", userSignature);\n    const deploymentData: DeploymentData = {\n      class_hash: accountClassHashResponse,\n      salt: starkKeyPubAX,\n      unique: `${num.toHex(0)}`,\n      calldata: AXConstructorCallData.map((value) => num.toHex(value)),\n    };\n\n    // console.log(\"Deployment data: ------ \", deploymentData);\n    const encryptedPrivateKey = encryptPrivateKey(privateKeyAX, encryptKey);\n    // console.log(\"Encrypted private key: \", encryptedPrivateKey);\n\n    // Llamar a la API para guardar la wallet en dashboard\n    const executeTransactionResponse = await fetch(`${BACKEND_URL}/chipi-wallets`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${bearerToken}`,\n        'x-api-key': apiPublicKey,\n      },\n      body: JSON.stringify({\n        apiPublicKey,\n        publicKey,\n        userSignature: {\n          r: (userSignature as any).r.toString(),\n          s: (userSignature as any).s.toString(),\n          recovery: (userSignature as any).recovery\n        },\n        typeData,\n        encryptedPrivateKey,\n        deploymentData: {\n          ...deploymentData,\n          salt: `${deploymentData.salt}`,\n          calldata: deploymentData.calldata.map(data => `${data}`),\n        }\n      }),\n    });\n    const executeTransaction = await executeTransactionResponse.json();\n    console.log(\"Execute transaction: \", executeTransaction);\n\n    if (executeTransaction.success) {\n    return {\n      success: true,\n      txHash: executeTransaction.txHash,\n      wallet: {\n        publicKey: executeTransaction.walletPublicKey,\n        encryptedPrivateKey: encryptedPrivateKey,\n      } as WalletData,\n      };\n    } else {\n      return {\n        success: false,\n        txHash: \"\",\n        wallet: {\n          publicKey: \"\",\n          encryptedPrivateKey: \"\",\n        } as WalletData,\n      };\n    }\n  } catch (error: unknown) {\n    console.error(\"Error detallado:\", error);\n\n    if (error instanceof Error && error.message.includes(\"SSL\")) {\n      throw new Error(\n        \"Error de conexión SSL. Intenta usando NODE_TLS_REJECT_UNAUTHORIZED=0 o verifica la URL del RPC\"\n      );\n    }\n\n    throw new Error(\n      `Error creating Argent wallet: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n};\n","import { cairo, type Call, type Uint256 } from \"starknet\";\nimport {\n  executePaymasterTransaction,\n  ExecuteTransactionParams,\n} from \"./send-transaction-with-paymaster\";\nimport type {\n  ApproveParams,\n  CallAnyContractParams,\n  ChipiSDKConfig,\n  CreateWalletParams,\n  StakeParams,\n  TransactionResult,\n  TransferParams,\n  WithdrawParams,\n} from \"./types\";\nimport { createArgentWallet } from \"./create-argent-wallet\";\nimport { CreateWalletResponse } from \"./types\";\n\nexport class ChipiSDK {\n  private apiPublicKey: string;\n  private readonly nodeUrl = \"https://starknet-mainnet.public.blastapi.io/rpc/v0_7\";\n\n  constructor(config: ChipiSDKConfig) {\n    this.apiPublicKey = config.apiPublicKey;\n    \n    // Bind all methods to preserve this context\n    this.executeTransaction = this.executeTransaction.bind(this);\n    this.transfer = this.transfer.bind(this);\n    this.approve = this.approve.bind(this);\n    this.stakeVesuUsdc = this.stakeVesuUsdc.bind(this);\n    this.withdraw = this.withdraw.bind(this);\n    this.callAnyContract = this.callAnyContract.bind(this);\n    this.createWallet = this.createWallet.bind(this);\n  }\n\n  private formatAmount(amount: string | number, decimals: number = 18): Uint256 {\n    const amountStr = amount.toString();\n    const [integerPart, decimalPart = ''] = amountStr.split('.');\n    const paddedDecimal = decimalPart.padEnd(decimals, '0').slice(0, decimals);\n    const amountBN = BigInt(integerPart + paddedDecimal);\n\n    return cairo.uint256(amountBN);\n  }\n\n  async executeTransaction(input: Omit<ExecuteTransactionParams, 'apiPublicKey'>): Promise<string> {\n    return executePaymasterTransaction({\n      ...input,\n      apiPublicKey: this.apiPublicKey,\n    });\n  }\n\n  async transfer(params: Omit<TransferParams, 'apiPublicKey'>): Promise<string> {\n    const { encryptKey, wallet, contractAddress, recipient, amount, decimals, bearerToken } = params;\n    console.log(\"transfer this format test\",this.formatAmount(amount, decimals));\n    return this.executeTransaction({\n      encryptKey,\n      wallet,\n      bearerToken,\n      calls: [\n        {\n          contractAddress,\n          entrypoint: \"transfer\",\n          calldata: [\n            recipient,\n            this.formatAmount(amount, decimals),\n            \"0x0\",\n          ],\n        },\n      ],\n    });\n  }\n\n  async approve(params: Omit<ApproveParams, 'apiPublicKey'>): Promise<string> {\n    const { encryptKey, wallet, contractAddress, spender, amount, decimals, bearerToken } = params;\n    return this.executeTransaction({\n      encryptKey,\n      wallet,\n      bearerToken,\n      calls: [\n        {\n          contractAddress,\n          entrypoint: \"approve\",\n          calldata: [\n            spender,\n            this.formatAmount(amount, decimals),\n            \"0x0\",\n          ],\n        },\n      ],\n    });\n  }\n\n  async stakeVesuUsdc(params: Omit<StakeParams, 'apiPublicKey'>): Promise<string> {\n    const { encryptKey, wallet, amount, receiverWallet, bearerToken } = params;\n    return this.executeTransaction({\n      encryptKey,\n      wallet,\n      bearerToken,\n      calls: [\n        {\n          contractAddress:\"0x053c91253bc9682c04929ca02ed00b3e423f6710d2ee7e0d5ebb06f3ecf368a8\",\n          entrypoint: \"approve\",\n          calldata: [\n            \"0x017f19582c61479f2fe0b6606300e975c0a8f439102f43eeecc1d0e9b3d84350\",\n            this.formatAmount(amount, 6),\n            \"0x0\",\n          ],\n        },\n        {\n          contractAddress:\"0x017f19582c61479f2fe0b6606300e975c0a8f439102f43eeecc1d0e9b3d84350\",\n          entrypoint: \"deposit\",\n          calldata: [\n            this.formatAmount(amount, 6),\n            \"0x0\",\n            receiverWallet,\n          ],\n        },\n      ],\n    });\n  }\n\n  async withdraw(params: Omit<WithdrawParams, 'apiPublicKey'>): Promise<string> {\n    const { encryptKey, wallet, contractAddress, amount, recipient, decimals, bearerToken } = params;\n    return this.executeTransaction({\n      encryptKey,\n      wallet,\n      bearerToken,\n      calls: [\n        {\n          contractAddress,\n          entrypoint: \"withdraw\",\n          calldata: [\n            this.formatAmount(amount, decimals),\n            recipient,\n            \"0x0\",\n          ],\n        },\n      ],\n    });\n  }\n\n  async callAnyContract(params: Omit<CallAnyContractParams, 'apiPublicKey'>): Promise<string> {\n    const { encryptKey, wallet, contractAddress, calls, bearerToken } = params;\n    return this.executeTransaction({\n      encryptKey,\n      wallet,\n      bearerToken,\n      calls,\n    });\n  }\n\n  async createWallet(params: Omit<CreateWalletParams, 'apiPublicKey' | 'nodeUrl'>): Promise<CreateWalletResponse> {\n    const { encryptKey, bearerToken } = params;\n    return createArgentWallet({\n      encryptKey: encryptKey,\n      apiPublicKey: this.apiPublicKey,\n      bearerToken,\n      nodeUrl: this.nodeUrl,\n    });\n  }\n}\n\n// Export types\n// export type { ChipiSDKConfig, WalletData, TransactionResult };","import { createContext, useContext, useMemo } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ChipiSDK } from \"../../core/chipi-sdk\";\n\nexport interface ChipiSDKConfig {\n  apiPublicKey: string;\n}\n\ninterface ChipiContextValue {\n  config: ChipiSDKConfig;\n  chipiSDK: ChipiSDK;\n}\n\nconst ChipiContext = createContext<ChipiContextValue | null>(null);\nconst queryClient = new QueryClient();\n\nexport function ChipiProvider({\n  children,\n  config,\n}: {\n  children: React.ReactNode;\n  config: ChipiSDKConfig;\n}) {\n  if (!config.apiPublicKey) {\n    throw new Error(\"Chipi SDK apiPublicKey is required\");\n  }\n\n  const chipiSDK = useMemo(() => {\n    console.log(\"Creating new ChipiSDK instance with apiPublicKey:\", config.apiPublicKey);\n    return new ChipiSDK({\n      apiPublicKey: config.apiPublicKey,\n    });\n  }, [config.apiPublicKey]);\n\n  const contextValue = useMemo(() => ({\n    config,\n    chipiSDK,\n  }), [config, chipiSDK]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ChipiContext.Provider value={contextValue}>\n        {children}\n      </ChipiContext.Provider>\n    </QueryClientProvider>\n  );\n}\n\nexport function useChipiContext() {\n  const context = useContext(ChipiContext);\n  if (!context) {\n    throw new Error(\"useChipiContext must be used within a ChipiProvider\");\n  }\n  return context;\n}\n","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport {  CreateWalletParams, CreateWalletResponse } from \"../../core\";\n\n\nexport function useCreateWallet() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<CreateWalletResponse, Error, Omit<CreateWalletParams, 'apiPublicKey' | 'nodeUrl'>>({\n    mutationFn: chipiSDK.createWallet,\n  });\n\n  return {\n    createWallet: mutation.mutate,\n    createWalletAsync: mutation.mutateAsync,\n    createWalletResponse: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { TransferParams } from \"../../core\";\n\n\n\n\nexport function useTransfer() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<string, Error, Omit<TransferParams, 'apiPublicKey'>>({\n    mutationFn: chipiSDK.transfer,\n  });\n\n  return {\n    transfer: mutation.mutate,\n    transferAsync: mutation.mutateAsync,\n    transferData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { ApproveParams } from \"../../core\";\n\nexport function useApprove() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<\n    string,\n    Error,\n    Omit<ApproveParams, \"apiPublicKey\">\n  >({\n    mutationFn: chipiSDK.approve,\n  });\n\n  return {\n    approve: mutation.mutate,\n    approveAsync: mutation.mutateAsync,\n    approveData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}\n","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { StakeParams } from \"../../core\";\n\n\n\n\nexport function useStakeVesuUsdc() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<string, Error, Omit<StakeParams, 'apiPublicKey'>>({\n    mutationFn: chipiSDK.stakeVesuUsdc,\n  });\n\n  return {\n    stake: mutation.mutate,\n    stakeAsync: mutation.mutateAsync,\n    stakeData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { WithdrawParams } from \"../../core\";\n\n\n\n\nexport function useWithdraw() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<string, Error, Omit<WithdrawParams, 'apiPublicKey'>>({\n    mutationFn: chipiSDK.withdraw,\n  });\n\n  return {\n    withdraw: mutation.mutate,\n    withdrawAsync: mutation.mutateAsync,\n    withdrawData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { CallAnyContractParams } from \"../../core\";\n\nexport function useCallAnyContract() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<\n    string,\n    Error,\n    Omit<CallAnyContractParams, \"apiPublicKey\">\n  >({\n    mutationFn: chipiSDK.callAnyContract,\n  });\n\n  return {\n    callAnyContract: mutation.mutate,\n    callAnyContractAsync: mutation.mutateAsync,\n    callAnyContractData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}\n"]}