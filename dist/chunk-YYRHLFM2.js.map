{"version":3,"sources":["../src/core/lib/encryption.ts","../src/core/send-transaction-with-paymaster.ts","../src/core/create-wallet.ts","../src/core/chipi-sdk.ts","../src/react/context/chipi-provider.tsx","../src/react/hooks/use-create-wallet.ts","../src/react/hooks/use-transfer.ts","../src/react/hooks/use-approve.ts","../src/react/hooks/use-stake.ts","../src/react/hooks/use-withdraw.ts","../src/react/hooks/use-call-any-contract.ts"],"names":["CryptoJS","RpcProvider","Account","fetchBuildTypedData","fetchExecuteTransaction","BASE_URL","SEPOLIA_BASE_URL","stark","ec","CairoCustomEnum","CairoOption","CairoOptionVariant","CallData","hash","num","cairo","createContext","QueryClient","jsx","QueryClientProvider","useContext","useMutation"],"mappings":"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","file":"chunk-YYRHLFM2.js","sourcesContent":["import CryptoJS from \"crypto-js\";\n\nexport const encryptPrivateKey = (\n  privateKey: string,\n  password: string,\n): string => {\n  if (!privateKey || !password) {\n    throw new Error(\"Private key and password are required\");\n  }\n\n  return CryptoJS.AES.encrypt(privateKey, password).toString();\n};\n\nexport const decryptPrivateKey = (\n  encryptedPrivateKey: string,\n  password: string,\n): string | null => {\n  if (!encryptedPrivateKey || !password) {\n    console.error(\"Encrypted private key and password are required\");\n    return null;\n  }\n\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, password);\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n\n    // Check if the decrypted string is empty\n    if (!decrypted) {\n      return null;\n    }\n\n    return decrypted;\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return null;\n  }\n};\n","import {\n  fetchBuildTypedData,\n  fetchExecuteTransaction,\n  GaslessOptions,\n} from \"@avnu/gasless-sdk\";\nimport { Account, Call, RpcProvider } from \"starknet\";\nimport { decryptPrivateKey } from \"./lib/encryption\";\n\nexport interface ExecuteTransactionParams {\n  encryptKey: string;\n  wallet: {\n    publicKey: string;\n    encryptedPrivateKey: string;\n  }; //ClerkWallet;\n  contractAddress: string;\n  calls: Call[];\n  rpcUrl: string;\n  options: GaslessOptions;\n}\n\nexport const executePaymasterTransaction = async (\n  params: ExecuteTransactionParams\n): Promise<string> => {\n  try {\n    const { encryptKey, wallet, calls, rpcUrl, options } = params;\n    console.log(\"Params: \", params);\n    // Fetch the encrypted private key from clerk public metadata\n    const privateKeyDecrypted = decryptPrivateKey(\n      wallet.encryptedPrivateKey,\n      encryptKey\n    );\n\n    if (!privateKeyDecrypted) {\n      throw new Error(\"Failed to decrypt private key\");\n    }\n\n    const provider = new RpcProvider({\n      nodeUrl: rpcUrl,\n    });\n\n    const accountAX = new Account(\n      provider,\n      wallet.publicKey,\n      privateKeyDecrypted\n    );\n\n    // Build the type data\n    const typeData = await fetchBuildTypedData(\n      wallet.publicKey,\n      calls,\n      undefined,\n      undefined,\n      options\n    );\n\n    // Sign the message\n    const userSignature = await accountAX.signMessage(typeData);\n\n    // Execute the transaction\n    const executeTransaction = await fetchExecuteTransaction(\n      wallet.publicKey,\n      JSON.stringify(typeData),\n      userSignature,\n      options\n    );\n\n    return executeTransaction.transactionHash;\n  } catch (error) {\n    console.error(\"Error sending transaction with paymaster\", error);\n    throw error;\n  }\n};\n","import type { DeploymentData, GaslessOptions } from \"@avnu/gasless-sdk\";\nimport {\n  BASE_URL,\n  SEPOLIA_BASE_URL,\n  fetchBuildTypedData,\n  fetchExecuteTransaction,\n} from \"@avnu/gasless-sdk\";\nimport type { Call } from \"starknet\";\nimport {\n  Account,\n  cairo,\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CallData,\n  ec,\n  hash,\n  num,\n  RpcProvider,\n  stark,\n} from \"starknet\";\nimport { encryptPrivateKey } from \"./lib/encryption\";\nimport { CreateWalletParams, CreateWalletResponse, WalletData } from \"./types\";\n\n\nexport const createArgentWallet = async (\n  params: CreateWalletParams\n): Promise<CreateWalletResponse> => {\n\n  console.log(\"create wallet Params: \", params);\n  try {\n    const { encryptKey, apiKey, network, rpcUrl } = params;\n\n    const options: GaslessOptions = {\n      baseUrl: network === \"mainnet\" ? BASE_URL : SEPOLIA_BASE_URL,\n      apiKey,\n    };\n    const provider = new RpcProvider({\n      nodeUrl: rpcUrl,\n    });\n\n    // Generating the private key with Stark Curve\n    const privateKeyAX = stark.randomAddress();\n    const starkKeyPubAX = ec.starkCurve.getStarkKey(privateKeyAX);\n\n    // Using Argent X Account v0.4.0 class hash\n    // POR REVISAR: CLASSHASH ES EL MISMO EN MAINNET?\n    const accountClassHash = params.argentClassHash;\n\n    // Calculate future address of the ArgentX account\n    const axSigner = new CairoCustomEnum({\n      Starknet: { pubkey: starkKeyPubAX },\n    });\n    // Set the dApp Guardian address\n    const axGuardian = new CairoOption<unknown>(CairoOptionVariant.None);\n\n    const AXConstructorCallData = CallData.compile({\n      owner: axSigner,\n      guardian: axGuardian,\n    });\n\n    const contractAddress = hash.calculateContractAddressFromHash(\n      starkKeyPubAX,\n      accountClassHash,\n      AXConstructorCallData,\n      0\n    );\n\n    // Initiating Account\n    const account = new Account(provider, contractAddress, privateKeyAX);\n    console.log(\"Account \", { ...account });\n\n    // Ping to activate the account\n    const initialValue: Call[] = [\n      {\n        contractAddress: params.activateContractAddress,\n        entrypoint: params.activateContractEntryPoint,\n        calldata: [contractAddress], // , cairo.felt(\"Hello, from Chipi SDK!\")\n      },\n    ];\n\n    const typeData = await fetchBuildTypedData(\n      contractAddress,\n      initialValue,\n      undefined,\n      undefined,\n      { baseUrl: BASE_URL, apiKey: options.apiKey },\n      accountClassHash\n    );\n\n    const userSignature = await account.signMessage(typeData);\n\n    const deploymentData: DeploymentData = {\n      class_hash: accountClassHash,\n      salt: starkKeyPubAX,\n      unique: `${num.toHex(0)}`,\n      calldata: AXConstructorCallData.map((value) => num.toHex(value)),\n    };\n\n    const executeTransaction = await fetchExecuteTransaction(\n      contractAddress,\n      JSON.stringify(typeData),\n      userSignature,\n      options,\n      deploymentData\n    );\n\n    const encryptedPrivateKey = encryptPrivateKey(privateKeyAX, encryptKey);\n    console.log(\"Encrypted private key: \", encryptedPrivateKey);\n\n    // TODO: Guardar la wallet en dashboard\n    console.log(\n      \"Wallet created successfully with txHash: \",\n      executeTransaction.transactionHash\n    );\n    console.log(\"Account address: \", contractAddress);\n    return {\n      success: true,\n      wallet: {\n        publicKey: contractAddress,\n        encryptedPrivateKey,\n      },\n      txHash: executeTransaction.transactionHash,\n    };\n  } catch (error: unknown) {\n    console.error(\"Error detallado:\", error);\n\n    if (error instanceof Error && error.message.includes(\"SSL\")) {\n      throw new Error(\n        \"Error de conexión SSL. Intenta usando NODE_TLS_REJECT_UNAUTHORIZED=0 o verifica la URL del RPC\"\n      );\n    }\n\n    throw new Error(\n      `Error creating Argent wallet: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n};\n","import { BASE_URL, GaslessOptions } from \"@avnu/gasless-sdk\";\nimport { cairo, type Call, type Uint256 } from \"starknet\";\nimport {\n  executePaymasterTransaction,\n  ExecuteTransactionParams,\n} from \"./send-transaction-with-paymaster\";\nimport type {\n  ApproveParams,\n  CallAnyContractParams,\n  ChipiSDKConfig,\n  CreateWalletParams,\n  StakeParams,\n  TransactionResult,\n  TransferParams,\n  WithdrawParams,\n} from \"./types\";\nimport { createArgentWallet } from \"./create-wallet\";\nimport { CreateWalletResponse } from \".\";\n\nexport class ChipiSDK {\n  private options: GaslessOptions;\n  private rpcUrl: string;\n  private apiKey: string;\n  private argentClassHash: string;\n  private activateContractAddress: string;\n  private activateContractEntryPoint: string;\n  private network: \"mainnet\" | \"sepolia\";\n\n  constructor(config: ChipiSDKConfig) {\n    this.options = {\n      baseUrl: BASE_URL,\n      apiKey: config.apiKey,\n    };\n    this.apiKey = config.apiKey;\n    this.network = config.network;\n    this.rpcUrl = config.rpcUrl;\n    this.argentClassHash =\n      config.argentClassHash ||\n      \"0x036078334509b514626504edc9fb252328d1a240e4e948bef8d0c08dff45927f\";\n    this.activateContractAddress =\n      config.activateContractAddress ||\n      \"0x0425fe282af8a0fce7478e06d21295fe85e57447f4f5127f80a04ef2eb6291fd\";\n    this.activateContractEntryPoint =\n      config.activateContractEntryPoint || \"set_greeting\";\n  }\n\n  private formatAmount(amount: string | number, decimals: number = 18): Uint256 {\n    const strAmount = amount.toString();\n    const [integerPart, decimalPart = ''] = strAmount.split('.');\n    const paddedDecimal = decimalPart.padEnd(decimals, '0').slice(0, decimals);\n    const amountBN = BigInt(integerPart + paddedDecimal);\n    \n    return cairo.uint256(amountBN);\n  }\n\n  async executeTransaction(input: ExecuteTransactionParams): Promise<string> {\n    return executePaymasterTransaction({\n      ...input,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n    });\n  }\n\n  async transfer(params: TransferParams): Promise<string> {\n    return this.executeTransaction({\n      encryptKey: params.encryptKey,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [\n        {\n          contractAddress: params.contractAddress,\n          entrypoint: \"transfer\",\n          calldata: [\n            params.recipient,\n            this.formatAmount(params.amount, params.decimals),\n          ],\n        },\n      ],\n    });\n  }\n\n  async approve(params: ApproveParams): Promise<string> {\n    return this.executeTransaction({\n      encryptKey: params.encryptKey,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [\n        {\n          contractAddress: params.contractAddress,\n          entrypoint: \"approve\",\n          calldata: [\n            params.spender,\n            this.formatAmount(params.amount, params.decimals),\n          ],\n        },\n      ],\n    });\n  }\n\n  async stake(params: StakeParams): Promise<string> {\n    return this.executeTransaction({\n      encryptKey: params.encryptKey,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [\n        {\n          contractAddress: params.contractAddress,\n          entrypoint: \"deposit\",\n          calldata: [\n            this.formatAmount(params.amount, params.decimals),\n            params.recipient,\n          ],\n        },\n      ],\n    });\n  }\n\n  async withdraw(params: WithdrawParams): Promise<string> {\n    return this.executeTransaction({\n      encryptKey: params.encryptKey,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [\n        {\n          contractAddress: params.contractAddress,\n          entrypoint: \"withdraw\",\n          calldata: [\n            this.formatAmount(params.amount, params.decimals),\n            params.recipient,\n          ],\n        },\n      ],\n    });\n  }\n\n  async callAnyContract(params: CallAnyContractParams): Promise<string> {\n    return this.executeTransaction({\n      encryptKey: params.encryptKey,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      calls: params.calls,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n    });\n  }\n\n  async createWallet(encryptKey: string): Promise<CreateWalletResponse> {\n    return createArgentWallet({\n      encryptKey: encryptKey,\n      rpcUrl: this.rpcUrl,\n      argentClassHash: this.argentClassHash,\n      activateContractAddress: this.activateContractAddress,\n      activateContractEntryPoint: this.activateContractEntryPoint,\n      apiKey: this.apiKey,\n      network: this.network,\n    });\n  }\n}\n\n// Export types\n// export type { ChipiSDKConfig, WalletData, TransactionResult };\n","import { createContext, useContext } from 'react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ChipiSDK } from '../../core/chipi-sdk';\n\nexport interface ChipiSDKConfig {\n  apiKey: string;\n  rpcUrl: string;\n  network: \"mainnet\" | \"sepolia\";\n  activateContractAddress?: string;\n  argentClassHash?: string;\n  activateContractEntryPoint?: string;\n  // Add other config options here as needed\n}\n\ninterface ChipiContextValue {\n  config: ChipiSDKConfig;\n  chipiSDK: ChipiSDK;\n}\n\nconst ChipiContext = createContext<ChipiContextValue | null>(null);\nconst queryClient = new QueryClient();\n\nexport function ChipiProvider({ \n  children, \n  config \n}: { \n  children: React.ReactNode;\n  config: ChipiSDKConfig;\n}) {\n  if (!config.apiKey) {\n    throw new Error('Chipi SDK requires an API key');\n  }\n\n  const chipiSDK = new ChipiSDK({\n    apiKey: config.apiKey,\n    rpcUrl: config.rpcUrl,\n    network: config.network,\n    argentClassHash: config.argentClassHash,\n    activateContractAddress: config.activateContractAddress,\n    activateContractEntryPoint: config.activateContractEntryPoint,\n  });\n\n  return (\n    <ChipiContext.Provider value={{ config, chipiSDK }}>\n      <QueryClientProvider client={queryClient}>\n        {children}\n      </QueryClientProvider>\n    </ChipiContext.Provider>\n  );\n}\n\nexport function useChipiContext() {\n  const context = useContext(ChipiContext);\n  if (!context) {\n    throw new Error('useChipiContext must be used within a ChipiProvider');\n  }\n  return context;\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport {  CreateWalletResponse } from \"../../core\";\n\n\nexport function useCreateWallet() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation<CreateWalletResponse, Error, string>({\n    mutationFn: (encryptKey: string) => chipiSDK.createWallet(encryptKey),\n  });\n\n  return {\n    createWallet: mutation.mutate,\n    createWalletAsync: mutation.mutateAsync,\n    createWalletResponse: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { TransferParams } from \"../../core\";\n\n\n\n\nexport function useTransfer() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation({\n    mutationFn: (params: TransferParams) => chipiSDK.transfer(params),\n  });\n\n  return {\n    transfer: mutation.mutate,\n    transferAsync: mutation.mutateAsync,\n    transferData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","\n\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { ApproveParams } from \"../../core\";\n\n\n\n\nexport function useApprove() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation({\n    mutationFn: (params: ApproveParams) => chipiSDK.approve(params),\n  });\n\n  return {\n    approve: mutation.mutate,\n    approveAsync: mutation.mutateAsync,\n    approveData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}\n","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { StakeParams } from \"../../core\";\n\n\n\n\nexport function useStake() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation({\n    mutationFn: (params: StakeParams) => chipiSDK.stake(params),\n  });\n\n  return {\n    stake: mutation.mutate,\n    stakeAsync: mutation.mutateAsync,\n    stakeData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { WithdrawParams } from \"../../core\";\n\n\n\n\nexport function useWithdraw() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation({\n    mutationFn: (params: WithdrawParams) => chipiSDK.withdraw(params),\n  });\n\n  return {\n    withdraw: mutation.mutate,\n    withdrawAsync: mutation.mutateAsync,\n    withdrawData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}","import { useMutation } from \"@tanstack/react-query\";\nimport { useChipiContext } from \"../context\";\nimport { CallAnyContractParams } from \"../../core\";\n\n\nexport function useCallAnyContract() {\n  const { chipiSDK } = useChipiContext();\n\n  const mutation = useMutation({\n    mutationFn: (params: CallAnyContractParams) => chipiSDK.callAnyContract(params),\n  });\n\n  return {\n    callAnyContract: mutation.mutate,\n    callAnyContractAsync: mutation.mutateAsync,\n    callAnyContractData: mutation.data,\n    isLoading: mutation.isPending,\n    isError: mutation.isError,\n  };\n}"]}