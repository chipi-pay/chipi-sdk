{"version":3,"sources":["../src/core/send-transaction-with-paymaster.ts","../src/core/chipi-sdk.ts"],"names":[],"mappings":";;;;;AAmBe,IAAA,2BAAA,GAA8B,OAAO,KAAoE,KAAA;AACtH,EAAI,IAAA;AACF,IAAA,MAAM,EAAE,GAAK,EAAA,MAAA,EAAQ,KAAO,EAAA,MAAA,EAAQ,SAAY,GAAA,KAAA;AAE/C,IAAA,MAAM,mBAAsB,GAAA,iBAAA;AAAA,MACzB,MAAO,CAAA,mBAAA;AAAA,MACP;AAAA,KACF;AAEA,IAAA,IAAI,CAAC,mBAAqB,EAAA;AACxB,MAAM,MAAA,IAAI,MAAM,+BAA+B,CAAA;AAAA;AAGnD,IAAM,MAAA,QAAA,GAAW,IAAI,WAAY,CAAA;AAAA,MAC7B,OAAS,EAAA;AAAA,KACZ,CAAA;AAED,IAAA,MAAM,YAAY,IAAI,OAAA;AAAA,MAClB,QAAA;AAAA,MACA,MAAO,CAAA,SAAA;AAAA,MACP;AAAA,KACF;AAGA,IAAA,MAAM,WAAW,MAAM,mBAAA;AAAA,MACrB,MAAO,CAAA,SAAA;AAAA,MACP,KAAA;AAAA,MACA,KAAA,CAAA;AAAA,MACA,KAAA,CAAA;AAAA,MACA;AAAA,KACF;AAGA,IAAA,MAAM,aAAgB,GAAA,MAAM,SAAU,CAAA,WAAA,CAAY,QAAQ,CAAA;AAG1D,IAAA,MAAM,qBAAqB,MAAM,uBAAA;AAAA,MAC/B,MAAO,CAAA,SAAA;AAAA,MACP,IAAA,CAAK,UAAU,QAAQ,CAAA;AAAA,MACvB,aAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,OAAO,kBAAmB,CAAA,eAAA;AAAA,WACrB,KAAO,EAAA;AACd,IAAQ,OAAA,CAAA,KAAA,CAAM,4CAA4C,KAAK,CAAA;AAC/D,IAAO,OAAA,IAAA;AAAA;AAEX;;;AC9DO,IAAM,WAAN,MAAe;AAAA,EAOpB,YAAY,MAAwB,EAAA;AAClC,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,OAAS,EAAA,QAAA;AAAA,MACT,QAAQ,MAAO,CAAA;AAAA,KACjB;AACA,IAAA,IAAA,CAAK,SAAS,MAAO,CAAA,MAAA;AACrB,IAAA,IAAA,CAAK,kBAAkB,MAAO,CAAA,eAAA;AAC9B,IAAA,IAAA,CAAK,kBAAkB,MAAO,CAAA,eAAA;AAC9B,IAAK,IAAA,CAAA,kBAAA,GAAqB,OAAO,kBAAsB,IAAA,aAAA;AAAA;AACzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,mBAAmB,KAAiE,EAAA;AACxF,IAAA,OAAO,2BAA4B,CAAA;AAAA,MACjC,GAAG,KAAA;AAAA,MACH,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,SAAS,IAAK,CAAA;AAAA,KACf,CAAA;AAAA;AAEL","file":"index.mjs","sourcesContent":["import {\n    fetchBuildTypedData,\n    fetchExecuteTransaction,\n    GaslessOptions,\n  } from \"@avnu/gasless-sdk\";\n  import { Account, Call, RpcProvider } from \"starknet\";\n  import { decryptPrivateKey } from \"./lib/encryption\";\n\n  export interface ExecutePaymasterTransactionInput {\n    pin: string;\n    wallet: {\n      publicKey: string;\n      encryptedPrivateKey: string;\n    }; //ClerkWallet;\n    calls: Call[];\n    rpcUrl?: string;\n    options?: GaslessOptions;\n  }\n\n  export const executePaymasterTransaction = async (input: ExecutePaymasterTransactionInput): Promise<string | null> => {\n  try {\n    const { pin, wallet, calls, rpcUrl, options } = input;\n     // Fetch the encrypted private key from clerk public metadata\n     const privateKeyDecrypted = decryptPrivateKey(\n        wallet.encryptedPrivateKey,\n        pin,\n      );\n  \n      if (!privateKeyDecrypted) {\n        throw new Error(\"Failed to decrypt private key\");\n      }\n\n    const provider = new RpcProvider({\n        nodeUrl: rpcUrl as string,\n    });\n\n    const accountAX = new Account(\n        provider,\n        wallet.publicKey,\n        privateKeyDecrypted,\n      );\n  \n      // Build the type data\n      const typeData = await fetchBuildTypedData(\n        wallet.publicKey,\n        calls,\n        undefined,\n        undefined,\n        options,\n      );\n  \n      // Sign the message\n      const userSignature = await accountAX.signMessage(typeData);\n  \n      // Execute the transaction\n      const executeTransaction = await fetchExecuteTransaction(\n        wallet.publicKey,\n        JSON.stringify(typeData),\n        userSignature,\n        options,\n      );\n\n      return executeTransaction.transactionHash;\n  } catch (error) {\n    console.error(\"Error sending transaction with paymaster\", error);\n    return null;\n  }\n}\n  ","import { BASE_URL, GaslessOptions } from \"@avnu/gasless-sdk\";\nimport { createArgentWallet } from \"./create-wallet\";\nimport { ExecutePaymasterTransactionInput, executePaymasterTransaction } from \"./send-transaction-with-paymaster\";\nimport type { ChipiSDKConfig, TransactionResult } from \"./types\";\n\nexport class ChipiSDK {\n  private options: GaslessOptions;\n  private rpcUrl: string;\n  private argentClassHash: string;\n  private contractAddress: string;\n  private contractEntryPoint: string;\n\n  constructor(config: ChipiSDKConfig) {\n    this.options = {\n      baseUrl: BASE_URL,\n      apiKey: config.apiKey,\n    };\n    this.rpcUrl = config.rpcUrl;\n    this.argentClassHash = config.argentClassHash;\n    this.contractAddress = config.contractAddress;\n    this.contractEntryPoint = config.contractEntryPoint || \"get_counter\";\n  }\n\n  // async createWallet(encryptKey: string): Promise<TransactionResult> {\n  //   return createArgentWallet({\n  //     encryptKey,\n  //   });\n  // }\n\n  async executeTransaction(input: ExecutePaymasterTransactionInput): Promise<string | null> {\n    return executePaymasterTransaction({\n      ...input,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n    });\n  }\n}"]}