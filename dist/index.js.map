{"version":3,"sources":["../src/core/send-transaction-with-paymaster.ts","../src/core/chipi-sdk.ts"],"names":["decryptPrivateKey","RpcProvider","Account","fetchBuildTypedData","fetchExecuteTransaction","BASE_URL","cairo"],"mappings":"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","file":"index.js","sourcesContent":["import {\n    fetchBuildTypedData,\n    fetchExecuteTransaction,\n    GaslessOptions,\n  } from \"@avnu/gasless-sdk\";\n  import { Account, Call, RpcProvider } from \"starknet\";\n  import { decryptPrivateKey } from \"./lib/encryption\";\n\n  export interface ExecuteTransactionParams {\n    pin: string;\n    wallet: {\n      publicKey: string;\n      encryptedPrivateKey: string;\n    }; //ClerkWallet;\n    contractAddress: string;\n    calls: Call[];\n    rpcUrl: string;\n    options: GaslessOptions;\n  }\n\n  export const executePaymasterTransaction = async (params: ExecuteTransactionParams): Promise<string | null> => {\n  try {\n    const { pin, wallet, calls, rpcUrl, options } = params;\n    console.log(\"Params: \", params);\n     // Fetch the encrypted private key from clerk public metadata\n     const privateKeyDecrypted = decryptPrivateKey(\n        wallet.encryptedPrivateKey,\n        pin,\n      );\n  \n      if (!privateKeyDecrypted) {\n        throw new Error(\"Failed to decrypt private key\");\n      }\n\n    const provider = new RpcProvider({\n        nodeUrl: rpcUrl,\n    });\n    \n    const accountAX = new Account(\n        provider,\n        wallet.publicKey,\n        privateKeyDecrypted,\n      );\n\n      // Build the type data\n      const typeData = await fetchBuildTypedData(\n        wallet.publicKey,\n        calls,\n        undefined,\n        undefined,\n        options,\n      );\n  \n      // Sign the message\n      const userSignature = await accountAX.signMessage(typeData);\n  \n      // Execute the transaction\n      const executeTransaction = await fetchExecuteTransaction(\n        wallet.publicKey,\n        JSON.stringify(typeData),\n        userSignature,\n        options,\n      );\n\n      return executeTransaction.transactionHash;\n  } catch (error) {\n    console.error(\"Error sending transaction with paymaster\", error);\n    return null;\n  }\n}\n  ","import { BASE_URL, GaslessOptions } from \"@avnu/gasless-sdk\";\nimport { cairo, type Call, type Uint256 } from \"starknet\";\nimport { executePaymasterTransaction, ExecuteTransactionParams } from \"./send-transaction-with-paymaster\";\nimport type { ChipiSDKConfig, TransactionResult, WalletData } from \"./types\";\n\nexport class ChipiSDK {\n  private options: GaslessOptions;\n  private rpcUrl: string;\n  private argentClassHash: string;\n  private contractAddress: string;\n  private contractEntryPoint: string;\n\n  constructor(config: ChipiSDKConfig) {\n    this.options = {\n      baseUrl: BASE_URL,\n      apiKey: config.apiKey,\n    };\n    this.rpcUrl = config.rpcUrl;\n    this.argentClassHash = config.argentClassHash;\n    this.contractAddress = config.contractAddress;\n    this.contractEntryPoint = config.contractEntryPoint || \"set_greeting\";\n  }\n\n  private formatAmount(amount: string | number, decimals: number = 18): Uint256 {\n    const numericAmount = Number(amount);\n    const multiplier = 10 ** decimals;\n    \n    const amountBN = BigInt(Math.round(numericAmount * multiplier));\n    \n    return cairo.uint256(amountBN);\n  }\n\n  async executeTransaction(input: ExecuteTransactionParams): Promise<string | null> {\n    return executePaymasterTransaction({\n      ...input,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n    });\n  }\n\n  async transfer(params: {\n    pin: string;\n    wallet: WalletData;\n    contractAddress: string;\n    recipient: string;\n    amount: string | number;\n    decimals?: number;\n  }): Promise<string | null> {\n    return this.executeTransaction({\n      pin: params.pin,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [{\n        contractAddress: params.contractAddress,\n        entrypoint: 'transfer',\n        calldata: [params.recipient, this.formatAmount(params.amount, params.decimals)]\n      }]\n    });\n  }\n\n  async approve(params: {\n    pin: string;\n    wallet: WalletData;\n    contractAddress: string;\n    spender: string;\n    amount: string | number;\n    decimals?: number;\n  }): Promise<string | null> {\n    return this.executeTransaction({\n      pin: params.pin,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [{\n        contractAddress: params.contractAddress,\n        entrypoint: 'approve',\n        calldata: [params.spender, this.formatAmount(params.amount, params.decimals)]\n      }]\n    });\n  }\n\n  async stake(params: {\n    pin: string;\n    wallet: WalletData;\n    contractAddress: string;\n    amount: string | number;\n    recipient: string;\n    decimals?: number;\n  }): Promise<string | null> {\n    return this.executeTransaction({\n      pin: params.pin,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [{\n        contractAddress: params.contractAddress,\n        entrypoint: 'deposit',\n        calldata: [this.formatAmount(params.amount, params.decimals), params.recipient]\n      }]\n    });\n  }\n\n  async withdraw(params: {\n    pin: string;\n    wallet: WalletData;\n    contractAddress: string;\n    amount: string | number;\n    decimals?: number;\n    recipient: string;\n  }): Promise<string | null> {\n    return this.executeTransaction({\n      pin: params.pin,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: [{\n        contractAddress: params.contractAddress,\n        entrypoint: 'withdraw',\n        calldata: [this.formatAmount(params.amount, params.decimals), params.recipient]\n      }]\n    });\n  }\n\n  async callAnyContract(params: {\n    pin: string;\n    wallet: WalletData;\n    contractAddress: string;\n    calls: Call[];\n  }): Promise<string | null> {\n    return this.executeTransaction({\n      pin: params.pin,\n      wallet: params.wallet,\n      contractAddress: params.contractAddress,\n      rpcUrl: this.rpcUrl,\n      options: this.options,\n      calls: params.calls,\n    });\n  }\n}\n\n\n// Export types\nexport type {\n  ChipiSDKConfig,\n  WalletData,\n  TransactionResult,\n};\n"]}
