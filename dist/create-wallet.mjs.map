{"version":3,"sources":["../src/core/lib/encryption.ts","../src/core/create-wallet.ts"],"names":[],"mappings":";;;;AAEO,IAAM,iBAAA,GAAoB,CAC/B,UAAA,EACA,QACW,KAAA;AACX,EAAI,IAAA,CAAC,UAAc,IAAA,CAAC,QAAU,EAAA;AAC5B,IAAM,MAAA,IAAI,MAAM,uCAAuC,CAAA;AAAA;AAGzD,EAAA,OAAO,SAAS,GAAI,CAAA,OAAA,CAAQ,UAAY,EAAA,QAAQ,EAAE,QAAS,EAAA;AAC7D,CAAA;;;ACMa,IAAA,kBAAA,GAAqB,OAC/B,MACiC,KAAA;AAGlC,EAAI,IAAA;AACF,IAAA,MAAM,EAAE,UAAY,EAAA,MAAA,EAAQ,SAAW,EAAA,KAAA,EAAO,SAAY,GAAA,MAAA;AAE1D,IAAA,MAAM,QAAW,GAAA,IAAI,WAAY,CAAA,EAAE,SAAkB,CAAA;AAErD,IAAM,MAAA,YAAA,GAAe,MAAM,aAAc,EAAA;AACzC,IAAA,MAAM,aAAgB,GAAA,EAAA,CAAG,UAAW,CAAA,WAAA,CAAY,YAAY,CAAA;AAG5D,IAAA,MAAM,gBAAmB,GAAA,oEAAA;AAGzB,IAAM,MAAA,QAAA,GAAW,IAAI,eAAgB,CAAA;AAAA,MACnC,QAAA,EAAU,EAAE,MAAA,EAAQ,aAAc;AAAA,KACnC,CAAA;AAED,IAAA,MAAM,UAAa,GAAA,IAAI,WAAqB,CAAA,kBAAA,CAAmB,IAAI,CAAA;AAEnE,IAAM,MAAA,qBAAA,GAAwB,SAAS,OAAQ,CAAA;AAAA,MAC7C,KAAO,EAAA,QAAA;AAAA,MACP,QAAU,EAAA;AAAA,KACX,CAAA;AAED,IAAA,MAAM,kBAAkB,IAAK,CAAA,gCAAA;AAAA,MAC3B,aAAA;AAAA,MACA,gBAAA;AAAA,MACA,qBAAA;AAAA,MACA;AAAA,KACF;AAIA,IAAA,MAAM,OAAU,GAAA,IAAI,OAAQ,CAAA,QAAA,EAAU,iBAAiB,YAAY,CAAA;AAInE,IAAM,MAAA,gBAAA,GAAmB,MAAM,KAAA,CAAM,6EAA+E,EAAA;AAAA,MAClH,MAAQ,EAAA,MAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,cAAgB,EAAA,kBAAA;AAAA,QAChB,eAAA,EAAiB,UAAU,SAAS,CAAA,CAAA;AAAA,QACpC,WAAa,EAAA;AAAA,OACf;AAAA,MACA,IAAA,EAAM,KAAK,SAAU,CAAA;AAAA,QACnB,SAAW,EAAA,eAAA;AAAA,QACX;AAAA,OACD;AAAA,KACF,CAAA;AACD,IAAA,MAAM,EAAE,QAAU,EAAA,gBAAA,EAAkB,0BAA6B,GAAA,MAAM,iBAAiB,IAAK,EAAA;AAI7F,IAAA,MAAM,aAAgB,GAAA,MAAM,OAAQ,CAAA,WAAA,CAAY,QAAQ,CAAA;AAGxD,IAAA,MAAM,cAAiC,GAAA;AAAA,MACrC,UAAY,EAAA,wBAAA;AAAA,MACZ,IAAM,EAAA,aAAA;AAAA,MACN,MAAQ,EAAA,CAAA,EAAG,GAAI,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA,CAAA;AAAA,MACvB,QAAA,EAAU,sBAAsB,GAAI,CAAA,CAAC,UAAU,GAAI,CAAA,KAAA,CAAM,KAAK,CAAC;AAAA,KACjE;AAGA,IAAM,MAAA,mBAAA,GAAsB,iBAAkB,CAAA,YAAA,EAAc,UAAU,CAAA;AAItE,IAAM,MAAA,0BAAA,GAA6B,MAAM,KAAA,CAAM,4DAA8D,EAAA;AAAA,MAC3G,MAAQ,EAAA,MAAA;AAAA,MACR,OAAS,EAAA;AAAA,QACP,cAAgB,EAAA,kBAAA;AAAA,QAChB,eAAA,EAAiB,UAAU,SAAS,CAAA,CAAA;AAAA,QACpC,WAAa,EAAA;AAAA,OACf;AAAA,MACA,IAAA,EAAM,KAAK,SAAU,CAAA;AAAA,QACnB,SAAA,EAAW,GAAG,eAAe,CAAA,CAAA;AAAA,QAC7B,aAAe,EAAA;AAAA,UACb,CAAA,EAAI,aAAsB,CAAA,CAAA,CAAE,QAAS,EAAA;AAAA,UACrC,CAAA,EAAI,aAAsB,CAAA,CAAA,CAAE,QAAS,EAAA;AAAA,UACrC,UAAW,aAAsB,CAAA;AAAA,SACnC;AAAA,QACA,QAAA;AAAA,QACA,KAAA;AAAA,QACA,mBAAA;AAAA,QACA,cAAgB,EAAA;AAAA,UACd,GAAG,cAAA;AAAA,UACH,IAAA,EAAM,CAAG,EAAA,cAAA,CAAe,IAAI,CAAA,CAAA;AAAA,UAC5B,UAAU,cAAe,CAAA,QAAA,CAAS,IAAI,CAAQ,IAAA,KAAA,CAAA,EAAG,IAAI,CAAE,CAAA;AAAA;AACzD,OACD;AAAA,KACF,CAAA;AACD,IAAM,MAAA,kBAAA,GAAqB,MAAM,0BAAA,CAA2B,IAAK,EAAA;AAGjE,IAAO,OAAA;AAAA,MACL,OAAS,EAAA,IAAA;AAAA,MACT,QAAQ,kBAAmB,CAAA,MAAA;AAAA,MAC3B,MAAQ,EAAA;AAAA,QACN,WAAW,kBAAmB,CAAA,SAAA;AAAA,QAC9B;AAAA;AACF,KACF;AAAA,WACO,KAAgB,EAAA;AACvB,IAAQ,OAAA,CAAA,KAAA,CAAM,oBAAoB,KAAK,CAAA;AAEvC,IAAA,IAAI,iBAAiB,KAAS,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAA,CAAS,KAAK,CAAG,EAAA;AAC3D,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA;AAGF,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CACE,8BAAA,EAAA,KAAA,YAAiB,KAAQ,GAAA,KAAA,CAAM,UAAU,eAC3C,CAAA;AAAA,KACF;AAAA;AAEJ;AAEA,kBAAA;AAAA,EACA;AAAA,IACE,KAAO,EAAA,iCAAA;AAAA,IACP,UAAY,EAAA,MAAA;AAAA,IACZ,MAAQ,EAAA,yCAAA;AAAA,IACR,SAAW,EAAA,yEAAA;AAAA,IACX,OAAS,EAAA;AAAA;AAEX,CAAA","file":"create-wallet.mjs","sourcesContent":["import CryptoJS from \"crypto-js\";\n\nexport const encryptPrivateKey = (\n  privateKey: string,\n  password: string,\n): string => {\n  if (!privateKey || !password) {\n    throw new Error(\"Private key and password are required\");\n  }\n\n  return CryptoJS.AES.encrypt(privateKey, password).toString();\n};\n\nexport const decryptPrivateKey = (\n  encryptedPrivateKey: string,\n  password: string,\n): string | null => {\n  if (!encryptedPrivateKey || !password) {\n    console.error(\"Encrypted private key and password are required\");\n    return null;\n  }\n\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedPrivateKey, password);\n    const decrypted = bytes.toString(CryptoJS.enc.Utf8);\n\n    // Check if the decrypted string is empty\n    if (!decrypted) {\n      return null;\n    }\n\n    return decrypted;\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return null;\n  }\n};\n","import type { DeploymentData } from \"@avnu/gasless-sdk\";\nimport {\n  Account,\n  CairoCustomEnum,\n  CairoOption,\n  CairoOptionVariant,\n  CallData,\n  ec,\n  hash,\n  num,\n  RpcProvider,\n  stark,\n} from \"starknet\";\nimport { encryptPrivateKey } from \"./lib/encryption\";\nimport { CreateWalletParams, CreateWalletResponse, WalletData } from \"./types\";\n\n\nexport const createArgentWallet = async (\n   params: CreateWalletParams\n): Promise<CreateWalletResponse> => {\n\n  // console.log(\"create wallet Params: \", params);\n  try {\n    const { encryptKey, apiKey, secretKey, appId, nodeUrl } = params;\n   \n    const provider = new RpcProvider({ nodeUrl: nodeUrl });\n    // Generating the private key with Stark Curve\n    const privateKeyAX = stark.randomAddress();\n    const starkKeyPubAX = ec.starkCurve.getStarkKey(privateKeyAX);\n\n    // Using Argent X Account v0.4.0 class hash\n    const accountClassHash = \"0x036078334509b514626504edc9fb252328d1a240e4e948bef8d0c08dff45927f\" //params.argentClassHash;\n  \n    // Calculate future address of the ArgentX account\n    const axSigner = new CairoCustomEnum({\n      Starknet: { pubkey: starkKeyPubAX },\n    });\n    // Set the dApp Guardian address\n    const axGuardian = new CairoOption<unknown>(CairoOptionVariant.None);\n\n    const AXConstructorCallData = CallData.compile({\n      owner: axSigner,\n      guardian: axGuardian,\n    });\n\n    const contractAddress = hash.calculateContractAddressFromHash(\n      starkKeyPubAX,\n      accountClassHash,\n      AXConstructorCallData,\n      0\n    );\n    // console.log(\"Contract address: \", contractAddress);\n   \n    // Initiating Account\n    const account = new Account(provider, contractAddress, privateKeyAX);\n    // console.log(\"Account \", { ...account });\n\n    // Backend Call API to create the wallet\n    const typeDataResponse = await fetch(\"https://chipi-back-production.up.railway.app/chipi-wallets/prepare-creation\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${secretKey}`,\n        'X-API-Key': apiKey,\n      },\n      body: JSON.stringify({\n        publicKey: contractAddress,\n        appId: appId,\n      }),\n    });\n    const { typeData, accountClassHash: accountClassHashResponse } = await typeDataResponse.json();\n\n    // console.log(\"Type data: \", typeData);\n    // Sign the message\n    const userSignature = await account.signMessage(typeData);\n\n    // console.log(\"User signature: \", userSignature);\n    const deploymentData: DeploymentData = {\n      class_hash: accountClassHashResponse,\n      salt: starkKeyPubAX,\n      unique: `${num.toHex(0)}`,\n      calldata: AXConstructorCallData.map((value) => num.toHex(value)),\n    };\n\n    // console.log(\"Deployment data: ------ \", deploymentData);\n    const encryptedPrivateKey = encryptPrivateKey(privateKeyAX, encryptKey);\n    // console.log(\"Encrypted private key: \", encryptedPrivateKey);\n\n    // Llamar a la API para guardar la wallet en dashboard\n    const executeTransactionResponse = await fetch(\"https://chipi-back-production.up.railway.app/chipi-wallets\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${secretKey}`,\n        'X-API-Key': apiKey,\n      },\n      body: JSON.stringify({\n        publicKey: `${contractAddress}`,\n        userSignature: {\n          r: (userSignature as any).r.toString(),\n          s: (userSignature as any).s.toString(),\n          recovery: (userSignature as any).recovery\n        },\n        typeData,\n        appId: appId,\n        encryptedPrivateKey,\n        deploymentData: {\n          ...deploymentData,\n          salt: `${deploymentData.salt}`,\n          calldata: deploymentData.calldata.map(data => `${data}`),\n        }\n      }),\n    });\n    const executeTransaction = await executeTransactionResponse.json();\n    // console.log(\"Execute transaction: \", executeTransaction);\n\n    return {\n      success: true,\n      txHash: executeTransaction.txHash,\n      wallet: {\n        publicKey: executeTransaction.publicKey,\n        encryptedPrivateKey: encryptedPrivateKey,\n      } as WalletData,\n    };\n  } catch (error: unknown) {\n    console.error(\"Error detallado:\", error);\n\n    if (error instanceof Error && error.message.includes(\"SSL\")) {\n      throw new Error(\n        \"Error de conexi√≥n SSL. Intenta usando NODE_TLS_REJECT_UNAUTHORIZED=0 o verifica la URL del RPC\"\n      );\n    }\n\n    throw new Error(\n      `Error creating Argent wallet: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`\n    );\n  }\n};\n\ncreateArgentWallet(\n{\n  appId: \"org_2w1eJnTbFHqDqd0deVJgxLzBe4y\",\n  encryptKey: \"2233\",\n  apiKey: \"pk_dev_002136da33b04d293564fd5e5033af65\",\n  secretKey: \"sk_dev_d6773b54523dacb9823eca59dce9562a81135be86a645602eda0975cbba5d4e3\",\n  nodeUrl: \"https://starknet-mainnet.public.blastapi.io/rpc/v0_7\"\n}\n)\n"]}